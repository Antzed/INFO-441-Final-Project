/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Contacts as ContactsMapper, CertificateIssuerSetParameters as CertificateIssuerSetParametersMapper, CertificateIssuerUpdateParameters as CertificateIssuerUpdateParametersMapper, CertificateCreateParameters as CertificateCreateParametersMapper, CertificateImportParameters as CertificateImportParametersMapper, CertificatePolicy as CertificatePolicyMapper, CertificateUpdateParameters as CertificateUpdateParametersMapper, CertificateOperationUpdateParameter as CertificateOperationUpdateParameterMapper, CertificateMergeParameters as CertificateMergeParametersMapper, CertificateRestoreParameters as CertificateRestoreParametersMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const vaultBaseUrl = {
    parameterPath: "vaultBaseUrl",
    mapper: {
        serializedName: "vaultBaseUrl",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const maxresults = {
    parameterPath: ["options", "maxresults"],
    mapper: {
        constraints: {
            InclusiveMaximum: 25,
            InclusiveMinimum: 1
        },
        serializedName: "maxresults",
        type: {
            name: "Number"
        }
    }
};
export const includePending = {
    parameterPath: ["options", "includePending"],
    mapper: {
        serializedName: "includePending",
        type: {
            name: "Boolean"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificate-name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const contacts = {
    parameterPath: "contacts",
    mapper: ContactsMapper
};
export const provider = {
    parameterPath: "provider",
    mapper: CertificateIssuerSetParametersMapper
};
export const credentials = {
    parameterPath: ["options", "credentials"],
    mapper: CertificateIssuerSetParametersMapper
};
export const organizationDetails = {
    parameterPath: ["options", "organizationDetails"],
    mapper: CertificateIssuerSetParametersMapper
};
export const attributes = {
    parameterPath: ["options", "attributes"],
    mapper: CertificateIssuerSetParametersMapper
};
export const issuerName = {
    parameterPath: "issuerName",
    mapper: {
        serializedName: "issuer-name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const provider1 = {
    parameterPath: ["options", "provider"],
    mapper: CertificateIssuerUpdateParametersMapper
};
export const credentials1 = {
    parameterPath: ["options", "credentials"],
    mapper: CertificateIssuerUpdateParametersMapper
};
export const organizationDetails1 = {
    parameterPath: ["options", "organizationDetails"],
    mapper: CertificateIssuerUpdateParametersMapper
};
export const attributes1 = {
    parameterPath: ["options", "attributes"],
    mapper: CertificateIssuerUpdateParametersMapper
};
export const certificatePolicy = {
    parameterPath: ["options", "certificatePolicy"],
    mapper: CertificateCreateParametersMapper
};
export const certificateAttributes = {
    parameterPath: ["options", "certificateAttributes"],
    mapper: CertificateCreateParametersMapper
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: CertificateCreateParametersMapper
};
export const certificateName1 = {
    parameterPath: "certificateName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-zA-Z-]+$")
        },
        serializedName: "certificate-name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const base64EncodedCertificate = {
    parameterPath: "base64EncodedCertificate",
    mapper: CertificateImportParametersMapper
};
export const password = {
    parameterPath: ["options", "password"],
    mapper: CertificateImportParametersMapper
};
export const certificatePolicy1 = {
    parameterPath: ["options", "certificatePolicy"],
    mapper: CertificateImportParametersMapper
};
export const certificateAttributes1 = {
    parameterPath: ["options", "certificateAttributes"],
    mapper: CertificateImportParametersMapper
};
export const tags1 = {
    parameterPath: ["options", "tags"],
    mapper: CertificateImportParametersMapper
};
export const certificatePolicy2 = {
    parameterPath: "certificatePolicy",
    mapper: CertificatePolicyMapper
};
export const certificatePolicy3 = {
    parameterPath: ["options", "certificatePolicy"],
    mapper: CertificateUpdateParametersMapper
};
export const certificateAttributes2 = {
    parameterPath: ["options", "certificateAttributes"],
    mapper: CertificateUpdateParametersMapper
};
export const tags2 = {
    parameterPath: ["options", "tags"],
    mapper: CertificateUpdateParametersMapper
};
export const certificateVersion = {
    parameterPath: "certificateVersion",
    mapper: {
        serializedName: "certificate-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const cancellationRequested = {
    parameterPath: "cancellationRequested",
    mapper: CertificateOperationUpdateParameterMapper
};
export const x509Certificates = {
    parameterPath: "x509Certificates",
    mapper: CertificateMergeParametersMapper
};
export const certificateAttributes3 = {
    parameterPath: ["options", "certificateAttributes"],
    mapper: CertificateMergeParametersMapper
};
export const tags3 = {
    parameterPath: ["options", "tags"],
    mapper: CertificateMergeParametersMapper
};
export const certificateBundleBackup = {
    parameterPath: "certificateBundleBackup",
    mapper: CertificateRestoreParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map
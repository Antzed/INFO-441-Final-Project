{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../../src/lro/delete/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport {\n  DeleteCertificateOptions,\n  DeletedCertificate,\n  GetDeletedCertificateOptions,\n} from \"../../certificatesModels\";\nimport {\n  KeyVaultCertificatePollOperation,\n  KeyVaultCertificatePollOperationState,\n} from \"../keyVaultCertificatePoller\";\nimport { KeyVaultClient } from \"../../generated/keyVaultClient\";\nimport { getDeletedCertificateFromDeletedCertificateBundle } from \"../../transformations\";\nimport { tracingClient } from \"../../tracing\";\n\n/**\n * The public representation of the DeleteCertificatePoller operation state.\n */\nexport type DeleteCertificateState = KeyVaultCertificatePollOperationState<DeletedCertificate>;\n\n/**\n * An interface representing the state of a delete certificate's poll operation\n */\nexport interface DeleteCertificatePollOperationState\n  extends KeyVaultCertificatePollOperationState<DeletedCertificate> {}\n\n/**\n * An interface representing a delete certificate's poll operation\n */\nexport class DeleteCertificatePollOperation extends KeyVaultCertificatePollOperation<\n  DeleteCertificatePollOperationState,\n  DeletedCertificate\n> {\n  constructor(\n    public state: DeleteCertificatePollOperationState,\n    private vaultUrl: string,\n    private client: KeyVaultClient,\n    private operationOptions: OperationOptions = {}\n  ) {\n    super(state, { cancelMessage: \"Canceling the deletion of a certificate is not supported.\" });\n  }\n\n  /**\n   * The DELETE operation applies to any certificate stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a certificate. This operation requires the certificates/delete permission.\n   */\n  private deleteCertificate(\n    certificateName: string,\n    options: DeleteCertificateOptions = {}\n  ): Promise<DeletedCertificate> {\n    return tracingClient.withSpan(\n      \"DeleteCertificatePoller.deleteCertificate\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.deleteCertificate(\n          this.vaultUrl,\n          certificateName,\n          updatedOptions\n        );\n        return getDeletedCertificateFromDeletedCertificateBundle(response);\n      }\n    );\n  }\n\n  /**\n   * Retrieves the deleted certificate information plus its attributes, such as retention interval, scheduled permanent deletion and the\n   * current deletion recovery level. This operation requires the certificates/get permission.\n   */\n  public async getDeletedCertificate(\n    certificateName: string,\n    options: GetDeletedCertificateOptions = {}\n  ): Promise<DeletedCertificate> {\n    return tracingClient.withSpan(\n      \"DeleteCertificatePoller.getDeletedCertificate\",\n      options,\n      async (updatedOptions) => {\n        let parsedBody: any;\n        await this.client.getDeletedCertificate(this.vaultUrl, certificateName, {\n          ...updatedOptions,\n          onResponse: (response) => {\n            parsedBody = response.parsedBody;\n          },\n        });\n        return getDeletedCertificateFromDeletedCertificateBundle(parsedBody);\n      }\n    );\n  }\n\n  /**\n   * Reaches to the service and updates the delete certificate's poll operation.\n   */\n  async update(\n    this: DeleteCertificatePollOperation,\n    options: {\n      abortSignal?: AbortSignalLike;\n      fireProgress?: (state: DeleteCertificatePollOperationState) => void;\n    } = {}\n  ): Promise<DeleteCertificatePollOperation> {\n    const state = this.state;\n    const { certificateName } = state;\n\n    if (options.abortSignal) {\n      this.operationOptions.abortSignal = options.abortSignal;\n    }\n\n    if (!state.isStarted) {\n      const deletedCertificate = await this.deleteCertificate(\n        certificateName,\n        this.operationOptions\n      );\n      state.isStarted = true;\n      state.result = deletedCertificate;\n      if (!deletedCertificate.recoveryId) {\n        state.isCompleted = true;\n      }\n    }\n\n    if (!state.isCompleted) {\n      try {\n        state.result = await this.getDeletedCertificate(certificateName, this.operationOptions);\n        state.isCompleted = true;\n      } catch (error: any) {\n        if (error.statusCode === 403) {\n          // At this point, the resource exists but the user doesn't have access to it.\n          state.isCompleted = true;\n        } else if (error.statusCode !== 404) {\n          state.error = error;\n          state.isCompleted = true;\n          throw error;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n"]}
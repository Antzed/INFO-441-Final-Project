{"version":3,"file":"keyVaultCertificatePoller.js","sourceRoot":"","sources":["../../../../src/lro/keyVaultCertificatePoller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAqC,MAAM,iBAAiB,CAAC;AA0B5E;;GAEG;AACH,gDAAgD;AAChD,MAAM,UAAU,UAAU,CACxB,KAAa;IAEb,OAAO;QACL,eAAe,EAAE,KAAK,CAAC,eAAe;QACtC,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,WAAW,EAAE,KAAK,CAAC,WAAW;QAC9B,WAAW,EAAE,KAAK,CAAC,WAAW;QAC9B,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,MAAM,EAAE,KAAK,CAAC,MAAM;KACrB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,OAAgB,yBAGpB,SAAQ,MAAuB;IAHjC;;QAIE;;WAEG;QACI,iBAAY,GAAW,IAAI,CAAC;IAerC,CAAC;IAbC;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,OAAO,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAW,CAAC;IACpD,CAAC;CACF;AASD;;GAEG;AACH,MAAM,OAAO,gCAAgC;IAO3C,YAAmB,KAAa,EAAE,UAAmD,EAAE;QAApE,UAAK,GAAL,KAAK,CAAQ;QAFxB,kBAAa,GAAW,EAAE,CAAC;QAGjC,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;SAC5C;IACH,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,MAAM;QACjB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,MAAM;QACjB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;SAC9B,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport { delay } from \"@azure/core-util\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { KeyVaultClient } from \"../generated/keyVaultClient\";\n\n/**\n * Common parameters to a Key Vault Certificate Poller.\n */\nexport interface KeyVaultCertificatePollerOptions {\n  certificateName: string;\n  vaultUrl: string;\n  client: KeyVaultClient;\n  operationOptions?: OperationOptions;\n  intervalInMs?: number;\n  resumeFrom?: string;\n}\n\n/**\n * An interface representing the public shape of the state of a Key Vault Certificate Poller's operations.\n */\nexport interface KeyVaultCertificatePollOperationState<TResult>\n  extends PollOperationState<TResult> {\n  /**\n   * The name of the certificate.\n   */\n  certificateName: string;\n}\n\n/**\n * Generates a version of the state with only public properties. At least those common for all of the Key Vault Certificates pollers.\n */\n// eslint-disable-next-line no-use-before-define\nexport function cleanState<TState extends KeyVaultCertificatePollOperationState<TResult>, TResult>(\n  state: TState\n): KeyVaultCertificatePollOperationState<TResult> {\n  return {\n    certificateName: state.certificateName,\n    isStarted: state.isStarted,\n    isCancelled: state.isCancelled,\n    isCompleted: state.isCompleted,\n    error: state.error,\n    result: state.result,\n  };\n}\n\n/**\n * Common properties and methods of the Key Vault Certificate Pollers.\n */\nexport abstract class KeyVaultCertificatePoller<\n  TState extends KeyVaultCertificatePollOperationState<TResult>,\n  TResult\n> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public intervalInMs: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  async delay(): Promise<void> {\n    return delay(this.intervalInMs);\n  }\n\n  /**\n   * Gets the public state of the polling operation\n   */\n  public getOperationState(): TState {\n    return cleanState(this.operation.state) as TState;\n  }\n}\n\n/**\n * Optional parameters to the KeyVaultCertificatePollOperation\n */\nexport interface KeyVaultCertificatePollOperationOptions {\n  cancelMessage?: string;\n}\n\n/**\n * Common properties and methods of the Key Vault Certificate Poller operations.\n */\nexport class KeyVaultCertificatePollOperation<\n  TState extends KeyVaultCertificatePollOperationState<TResult>,\n  TResult\n> implements PollOperation<TState, TResult>\n{\n  private cancelMessage: string = \"\";\n\n  constructor(public state: TState, options: KeyVaultCertificatePollOperationOptions = {}) {\n    if (options.cancelMessage) {\n      this.cancelMessage = options.cancelMessage;\n    }\n  }\n\n  /**\n   * Meant to reach to the service and update the Poller operation.\n   */\n  public async update(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(\"Operation not supported.\");\n  }\n\n  /**\n   * Meant to reach to the service and cancel the Poller operation.\n   */\n  public async cancel(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(this.cancelMessage);\n  }\n\n  /**\n   * Serializes the create certificate's poll operation\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: cleanState(this.state),\n    });\n  }\n}\n"]}
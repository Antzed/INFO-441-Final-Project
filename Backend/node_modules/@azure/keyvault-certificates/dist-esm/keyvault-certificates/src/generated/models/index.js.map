{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAofH,qEAAqE;AACrE,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,wBAAwB;IACxB,mCAAc,CAAA;AAChB,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAWD,8EAA8E;AAC9E,MAAM,CAAN,IAAY,0BAeX;AAfD,WAAY,0BAA0B;IACpC,gVAAgV;IAChV,qDAAuB,CAAA;IACvB,sXAAsX;IACtX,4EAA8C,CAAA;IAC9C,8VAA8V;IAC9V,yDAA2B,CAAA;IAC3B,0TAA0T;IAC1T,oGAAsE,CAAA;IACtE,mVAAmV;IACnV,gGAAkE,CAAA;IAClE,2TAA2T;IAC3T,6EAA+C,CAAA;IAC/C,uaAAua;IACva,wHAA0F,CAAA;AAC5F,CAAC,EAfW,0BAA0B,KAA1B,0BAA0B,QAerC;AAiBD,uEAAuE;AACvE,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gCAAS,CAAA;IACT,uCAAgB,CAAA;IAChB,kCAAW,CAAA;IACX,yCAAkB,CAAA;IAClB,kCAAW,CAAA;IACX,yCAAkB,CAAA;AACpB,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;AAgBD,4EAA4E;AAC5E,MAAM,CAAN,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,0CAAc,CAAA;IACd,0CAAc,CAAA;IACd,0CAAc,CAAA;IACd,4CAAgB,CAAA;AAClB,CAAC,EALW,wBAAwB,KAAxB,wBAAwB,QAKnC;AAcD,qEAAqE;AACrE,MAAM,CAAN,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B,0DAAqC,CAAA;IACrC,sDAAiC,CAAA;IACjC,wDAAmC,CAAA;IACnC,0DAAqC,CAAA;IACrC,kDAA6B,CAAA;IAC7B,gDAA2B,CAAA;IAC3B,wCAAmB,CAAA;IACnB,kDAA6B,CAAA;IAC7B,kDAA6B,CAAA;AAC/B,CAAC,EAVW,iBAAiB,KAAjB,iBAAiB,QAU5B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\n\n/** The certificate list result. */\nexport interface CertificateListResult {\n  /**\n   * A response message containing a list of certificates in the key vault along with a link to the next page of certificates.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: CertificateItem[];\n  /**\n   * The URL to get the next set of certificates.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** The certificate item containing certificate metadata. */\nexport interface CertificateItem {\n  /** Certificate identifier. */\n  id?: string;\n  /** The certificate management attributes. */\n  attributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n  /** Thumbprint of the certificate. */\n  x509Thumbprint?: Uint8Array;\n}\n\n/** The object attributes managed by the KeyVault service. */\nexport interface Attributes {\n  /** Determines whether the object is enabled. */\n  enabled?: boolean;\n  /** Not before date in UTC. */\n  notBefore?: Date;\n  /** Expiry date in UTC. */\n  expires?: Date;\n  /**\n   * Creation time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly created?: Date;\n  /**\n   * Last updated time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly updated?: Date;\n}\n\n/** The key vault error exception. */\nexport interface KeyVaultError {\n  /**\n   * The key vault server error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly error?: ErrorModel | null;\n}\n\n/** The key vault server error. */\nexport interface ErrorModel {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The key vault server error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly innerError?: ErrorModel | null;\n}\n\n/** A certificate bundle consists of a certificate (X509) plus its attributes. */\nexport interface CertificateBundle {\n  /**\n   * The certificate id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The key id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly kid?: string;\n  /**\n   * The secret id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly sid?: string;\n  /**\n   * Thumbprint of the certificate.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly x509Thumbprint?: Uint8Array;\n  /**\n   * The management policy.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly policy?: CertificatePolicy;\n  /** CER contents of x509 certificate. */\n  cer?: Uint8Array;\n  /** The content type of the secret. eg. 'application/x-pem-file' or 'application/x-pkcs12', */\n  contentType?: string;\n  /** The certificate attributes. */\n  attributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Management policy for a certificate. */\nexport interface CertificatePolicy {\n  /**\n   * The certificate id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** Properties of the key backing a certificate. */\n  keyProperties?: KeyProperties;\n  /** Properties of the secret backing a certificate. */\n  secretProperties?: SecretProperties;\n  /** Properties of the X509 component of a certificate. */\n  x509CertificateProperties?: X509CertificateProperties;\n  /** Actions that will be performed by Key Vault over the lifetime of a certificate. */\n  lifetimeActions?: LifetimeAction[];\n  /** Parameters for the issuer of the X509 component of a certificate. */\n  issuerParameters?: IssuerParameters;\n  /** The certificate attributes. */\n  attributes?: CertificateAttributes;\n}\n\n/** Properties of the key pair backing a certificate. */\nexport interface KeyProperties {\n  /** Indicates if the private key can be exported. */\n  exportable?: boolean;\n  /** The type of key pair to be used for the certificate. */\n  keyType?: JsonWebKeyType;\n  /** The key size in bits. For example: 2048, 3072, or 4096 for RSA. */\n  keySize?: number;\n  /** Indicates if the same key pair will be used on certificate renewal. */\n  reuseKey?: boolean;\n  /** Elliptic curve name. For valid values, see JsonWebKeyCurveName. */\n  curve?: JsonWebKeyCurveName;\n}\n\n/** Properties of the key backing a certificate. */\nexport interface SecretProperties {\n  /** The media type (MIME type). */\n  contentType?: string;\n}\n\n/** Properties of the X509 component of a certificate. */\nexport interface X509CertificateProperties {\n  /** The subject name. Should be a valid X509 distinguished Name. */\n  subject?: string;\n  /** The enhanced key usage. */\n  ekus?: string[];\n  /** The subject alternative names. */\n  subjectAlternativeNames?: SubjectAlternativeNames;\n  /** List of key usages. */\n  keyUsage?: KeyUsageType[];\n  /** The duration that the certificate is valid in months. */\n  validityInMonths?: number;\n}\n\n/** The subject alternate names of a X509 object. */\nexport interface SubjectAlternativeNames {\n  /** Email addresses. */\n  emails?: string[];\n  /** Domain names. */\n  dnsNames?: string[];\n  /** User principal names. */\n  upns?: string[];\n}\n\n/** Action and its trigger that will be performed by Key Vault over the lifetime of a certificate. */\nexport interface LifetimeAction {\n  /** The condition that will execute the action. */\n  trigger?: Trigger;\n  /** The action that will be executed. */\n  action?: Action;\n}\n\n/** A condition to be satisfied for an action to be executed. */\nexport interface Trigger {\n  /** Percentage of lifetime at which to trigger. Value should be between 1 and 99. */\n  lifetimePercentage?: number;\n  /** Days before expiry to attempt renewal. Value should be between 1 and validity_in_months multiplied by 27. If validity_in_months is 36, then value should be between 1 and 972 (36 * 27). */\n  daysBeforeExpiry?: number;\n}\n\n/** The action that will be executed. */\nexport interface Action {\n  /** The type of the action. */\n  actionType?: ActionType;\n}\n\n/** Parameters for the issuer of the X509 component of a certificate. */\nexport interface IssuerParameters {\n  /** Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'. */\n  name?: string;\n  /** Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL' */\n  certificateType?: string;\n  /** Indicates if the certificates generated under this policy should be published to certificate transparency logs. */\n  certificateTransparency?: boolean;\n}\n\n/** The contacts for the vault certificates. */\nexport interface Contacts {\n  /**\n   * Identifier for the contacts collection.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** The contact list for the vault certificates. */\n  contactList?: Contact[];\n}\n\n/** The contact information for the vault certificates. */\nexport interface Contact {\n  /** Email address. */\n  emailAddress?: string;\n  /** Name. */\n  name?: string;\n  /** Phone number. */\n  phone?: string;\n}\n\n/** The certificate issuer list result. */\nexport interface CertificateIssuerListResult {\n  /**\n   * A response message containing a list of certificate issuers in the key vault along with a link to the next page of certificate issuers.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: CertificateIssuerItem[];\n  /**\n   * The URL to get the next set of certificate issuers.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** The certificate issuer item containing certificate issuer metadata. */\nexport interface CertificateIssuerItem {\n  /** Certificate Identifier. */\n  id?: string;\n  /** The issuer provider. */\n  provider?: string;\n}\n\n/** The certificate issuer set parameters. */\nexport interface CertificateIssuerSetParameters {\n  /** The issuer provider. */\n  provider: string;\n  /** The credentials to be used for the issuer. */\n  credentials?: IssuerCredentials;\n  /** Details of the organization as provided to the issuer. */\n  organizationDetails?: OrganizationDetails;\n  /** Attributes of the issuer object. */\n  attributes?: IssuerAttributes;\n}\n\n/** The credentials to be used for the certificate issuer. */\nexport interface IssuerCredentials {\n  /** The user name/account name/account id. */\n  accountId?: string;\n  /** The password/secret/account key. */\n  password?: string;\n}\n\n/** Details of the organization of the certificate issuer. */\nexport interface OrganizationDetails {\n  /** Id of the organization. */\n  id?: string;\n  /** Details of the organization administrator. */\n  adminDetails?: AdministratorDetails[];\n}\n\n/** Details of the organization administrator of the certificate issuer. */\nexport interface AdministratorDetails {\n  /** First name. */\n  firstName?: string;\n  /** Last name. */\n  lastName?: string;\n  /** Email address. */\n  emailAddress?: string;\n  /** Phone number. */\n  phone?: string;\n}\n\n/** The attributes of an issuer managed by the Key Vault service. */\nexport interface IssuerAttributes {\n  /** Determines whether the issuer is enabled. */\n  enabled?: boolean;\n  /**\n   * Creation time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly created?: Date;\n  /**\n   * Last updated time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly updated?: Date;\n}\n\n/** The issuer for Key Vault certificate. */\nexport interface IssuerBundle {\n  /**\n   * Identifier for the issuer object.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** The issuer provider. */\n  provider?: string;\n  /** The credentials to be used for the issuer. */\n  credentials?: IssuerCredentials;\n  /** Details of the organization as provided to the issuer. */\n  organizationDetails?: OrganizationDetails;\n  /** Attributes of the issuer object. */\n  attributes?: IssuerAttributes;\n}\n\n/** The certificate issuer update parameters. */\nexport interface CertificateIssuerUpdateParameters {\n  /** The issuer provider. */\n  provider?: string;\n  /** The credentials to be used for the issuer. */\n  credentials?: IssuerCredentials;\n  /** Details of the organization as provided to the issuer. */\n  organizationDetails?: OrganizationDetails;\n  /** Attributes of the issuer object. */\n  attributes?: IssuerAttributes;\n}\n\n/** The certificate create parameters. */\nexport interface CertificateCreateParameters {\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** A certificate operation is returned in case of asynchronous requests. */\nexport interface CertificateOperation {\n  /**\n   * The certificate id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /** Parameters for the issuer of the X509 component of a certificate. */\n  issuerParameters?: IssuerParameters;\n  /** The certificate signing request (CSR) that is being used in the certificate operation. */\n  csr?: Uint8Array;\n  /** Indicates if cancellation was requested on the certificate operation. */\n  cancellationRequested?: boolean;\n  /** Status of the certificate operation. */\n  status?: string;\n  /** The status details of the certificate operation. */\n  statusDetails?: string;\n  /** Error encountered, if any, during the certificate operation. */\n  error?: ErrorModel | null;\n  /** Location which contains the result of the certificate operation. */\n  target?: string;\n  /** Identifier for the certificate operation. */\n  requestId?: string;\n}\n\n/** The certificate import parameters. */\nexport interface CertificateImportParameters {\n  /** Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key. */\n  base64EncodedCertificate: string;\n  /** If the private key in base64EncodedCertificate is encrypted, the password used for encryption. */\n  password?: string;\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** The certificate update parameters. */\nexport interface CertificateUpdateParameters {\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** The certificate operation update parameters. */\nexport interface CertificateOperationUpdateParameter {\n  /** Indicates if cancellation was requested on the certificate operation. */\n  cancellationRequested: boolean;\n}\n\n/** The certificate merge parameters */\nexport interface CertificateMergeParameters {\n  /** The certificate or the certificate chain to merge. */\n  x509Certificates: Uint8Array[];\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** The backup certificate result, containing the backup blob. */\nexport interface BackupCertificateResult {\n  /**\n   * The backup blob containing the backed up certificate.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: Uint8Array;\n}\n\n/** The certificate restore parameters. */\nexport interface CertificateRestoreParameters {\n  /** The backup blob associated with a certificate bundle. */\n  certificateBundleBackup: Uint8Array;\n}\n\n/** A list of certificates that have been deleted in this vault. */\nexport interface DeletedCertificateListResult {\n  /**\n   * A response message containing a list of deleted certificates in the vault along with a link to the next page of deleted certificates\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: DeletedCertificateItem[];\n  /**\n   * The URL to get the next set of deleted certificates.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** The pending certificate signing request result. */\nexport interface PendingCertificateSigningRequestResult {\n  /**\n   * The pending certificate signing request as Base64 encoded string.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: string;\n}\n\n/** The deleted certificate item containing metadata about the deleted certificate. */\nexport type DeletedCertificateItem = CertificateItem & {\n  /** The url of the recovery object, used to identify and recover the deleted certificate. */\n  recoveryId?: string;\n  /**\n   * The time when the certificate is scheduled to be purged, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the certificate was deleted, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly deletedDate?: Date;\n};\n\n/** The certificate management attributes. */\nexport type CertificateAttributes = Attributes & {\n  /**\n   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recoverableDays?: number;\n  /**\n   * Reflects the deletion recovery level currently in effect for certificates in the current vault. If it contains 'Purgeable', the certificate can be permanently deleted by a privileged user; otherwise, only the system can purge the certificate, at the end of the retention interval.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recoveryLevel?: DeletionRecoveryLevel;\n};\n\n/** A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will be purged. */\nexport type DeletedCertificateBundle = CertificateBundle & {\n  /** The url of the recovery object, used to identify and recover the deleted certificate. */\n  recoveryId?: string;\n  /**\n   * The time when the certificate is scheduled to be purged, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the certificate was deleted, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly deletedDate?: Date;\n};\n\n/** Known values of {@link ApiVersion73} that the service accepts. */\nexport enum KnownApiVersion73 {\n  /** Api Version '7.3' */\n  Seven3 = \"7.3\"\n}\n\n/**\n * Defines values for ApiVersion73. \\\n * {@link KnownApiVersion73} can be used interchangeably with ApiVersion73,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **7.3**: Api Version '7.3'\n */\nexport type ApiVersion73 = string;\n\n/** Known values of {@link DeletionRecoveryLevel} that the service accepts. */\nexport enum KnownDeletionRecoveryLevel {\n  /** Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) */\n  Purgeable = \"Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered */\n  RecoverablePurgeable = \"Recoverable+Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered */\n  Recoverable = \"Recoverable\",\n  /** Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered */\n  RecoverableProtectedSubscription = \"Recoverable+ProtectedSubscription\",\n  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. */\n  CustomizedRecoverablePurgeable = \"CustomizedRecoverable+Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. */\n  CustomizedRecoverable = \"CustomizedRecoverable\",\n  /** Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled. */\n  CustomizedRecoverableProtectedSubscription = \"CustomizedRecoverable+ProtectedSubscription\"\n}\n\n/**\n * Defines values for DeletionRecoveryLevel. \\\n * {@link KnownDeletionRecoveryLevel} can be used interchangeably with DeletionRecoveryLevel,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Purgeable**: Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) \\\n * **Recoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered \\\n * **Recoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered \\\n * **Recoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered \\\n * **CustomizedRecoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. \\\n * **CustomizedRecoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. \\\n * **CustomizedRecoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled.\n */\nexport type DeletionRecoveryLevel = string;\n\n/** Known values of {@link JsonWebKeyType} that the service accepts. */\nexport enum KnownJsonWebKeyType {\n  EC = \"EC\",\n  ECHSM = \"EC-HSM\",\n  RSA = \"RSA\",\n  RSAHSM = \"RSA-HSM\",\n  Oct = \"oct\",\n  OctHSM = \"oct-HSM\"\n}\n\n/**\n * Defines values for JsonWebKeyType. \\\n * {@link KnownJsonWebKeyType} can be used interchangeably with JsonWebKeyType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **EC** \\\n * **EC-HSM** \\\n * **RSA** \\\n * **RSA-HSM** \\\n * **oct** \\\n * **oct-HSM**\n */\nexport type JsonWebKeyType = string;\n\n/** Known values of {@link JsonWebKeyCurveName} that the service accepts. */\nexport enum KnownJsonWebKeyCurveName {\n  P256 = \"P-256\",\n  P384 = \"P-384\",\n  P521 = \"P-521\",\n  P256K = \"P-256K\"\n}\n\n/**\n * Defines values for JsonWebKeyCurveName. \\\n * {@link KnownJsonWebKeyCurveName} can be used interchangeably with JsonWebKeyCurveName,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **P-256** \\\n * **P-384** \\\n * **P-521** \\\n * **P-256K**\n */\nexport type JsonWebKeyCurveName = string;\n\n/** Known values of {@link KeyUsageType} that the service accepts. */\nexport enum KnownKeyUsageType {\n  DigitalSignature = \"digitalSignature\",\n  NonRepudiation = \"nonRepudiation\",\n  KeyEncipherment = \"keyEncipherment\",\n  DataEncipherment = \"dataEncipherment\",\n  KeyAgreement = \"keyAgreement\",\n  KeyCertSign = \"keyCertSign\",\n  CRLSign = \"cRLSign\",\n  EncipherOnly = \"encipherOnly\",\n  DecipherOnly = \"decipherOnly\"\n}\n\n/**\n * Defines values for KeyUsageType. \\\n * {@link KnownKeyUsageType} can be used interchangeably with KeyUsageType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **digitalSignature** \\\n * **nonRepudiation** \\\n * **keyEncipherment** \\\n * **dataEncipherment** \\\n * **keyAgreement** \\\n * **keyCertSign** \\\n * **cRLSign** \\\n * **encipherOnly** \\\n * **decipherOnly**\n */\nexport type KeyUsageType = string;\n/** Defines values for ActionType. */\nexport type ActionType = \"EmailContacts\" | \"AutoRenew\";\n\n/** Optional parameters. */\nexport interface GetCertificatesOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n  /** Specifies whether to include certificates which are not completely provisioned. */\n  includePending?: boolean;\n}\n\n/** Contains response data for the getCertificates operation. */\nexport type GetCertificatesResponse = CertificateListResult;\n\n/** Optional parameters. */\nexport interface DeleteCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteCertificate operation. */\nexport type DeleteCertificateResponse = DeletedCertificateBundle;\n\n/** Optional parameters. */\nexport interface SetCertificateContactsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the setCertificateContacts operation. */\nexport type SetCertificateContactsResponse = Contacts;\n\n/** Optional parameters. */\nexport interface GetCertificateContactsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCertificateContacts operation. */\nexport type GetCertificateContactsResponse = Contacts;\n\n/** Optional parameters. */\nexport interface DeleteCertificateContactsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteCertificateContacts operation. */\nexport type DeleteCertificateContactsResponse = Contacts;\n\n/** Optional parameters. */\nexport interface GetCertificateIssuersOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getCertificateIssuers operation. */\nexport type GetCertificateIssuersResponse = CertificateIssuerListResult;\n\n/** Optional parameters. */\nexport interface SetCertificateIssuerOptionalParams\n  extends coreClient.OperationOptions {\n  /** The credentials to be used for the issuer. */\n  credentials?: IssuerCredentials;\n  /** Details of the organization as provided to the issuer. */\n  organizationDetails?: OrganizationDetails;\n  /** Attributes of the issuer object. */\n  attributes?: IssuerAttributes;\n}\n\n/** Contains response data for the setCertificateIssuer operation. */\nexport type SetCertificateIssuerResponse = IssuerBundle;\n\n/** Optional parameters. */\nexport interface UpdateCertificateIssuerOptionalParams\n  extends coreClient.OperationOptions {\n  /** The issuer provider. */\n  provider?: string;\n  /** The credentials to be used for the issuer. */\n  credentials?: IssuerCredentials;\n  /** Details of the organization as provided to the issuer. */\n  organizationDetails?: OrganizationDetails;\n  /** Attributes of the issuer object. */\n  attributes?: IssuerAttributes;\n}\n\n/** Contains response data for the updateCertificateIssuer operation. */\nexport type UpdateCertificateIssuerResponse = IssuerBundle;\n\n/** Optional parameters. */\nexport interface GetCertificateIssuerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCertificateIssuer operation. */\nexport type GetCertificateIssuerResponse = IssuerBundle;\n\n/** Optional parameters. */\nexport interface DeleteCertificateIssuerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteCertificateIssuer operation. */\nexport type DeleteCertificateIssuerResponse = IssuerBundle;\n\n/** Optional parameters. */\nexport interface CreateCertificateOptionalParams\n  extends coreClient.OperationOptions {\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the createCertificate operation. */\nexport type CreateCertificateResponse = CertificateOperation;\n\n/** Optional parameters. */\nexport interface ImportCertificateOptionalParams\n  extends coreClient.OperationOptions {\n  /** If the private key in base64EncodedCertificate is encrypted, the password used for encryption. */\n  password?: string;\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the importCertificate operation. */\nexport type ImportCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface GetCertificateVersionsOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getCertificateVersions operation. */\nexport type GetCertificateVersionsResponse = CertificateListResult;\n\n/** Optional parameters. */\nexport interface GetCertificatePolicyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCertificatePolicy operation. */\nexport type GetCertificatePolicyResponse = CertificatePolicy;\n\n/** Optional parameters. */\nexport interface UpdateCertificatePolicyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the updateCertificatePolicy operation. */\nexport type UpdateCertificatePolicyResponse = CertificatePolicy;\n\n/** Optional parameters. */\nexport interface UpdateCertificateOptionalParams\n  extends coreClient.OperationOptions {\n  /** The management policy for the certificate. */\n  certificatePolicy?: CertificatePolicy;\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the updateCertificate operation. */\nexport type UpdateCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface GetCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCertificate operation. */\nexport type GetCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface UpdateCertificateOperationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the updateCertificateOperation operation. */\nexport type UpdateCertificateOperationResponse = CertificateOperation;\n\n/** Optional parameters. */\nexport interface GetCertificateOperationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCertificateOperation operation. */\nexport type GetCertificateOperationResponse = CertificateOperation;\n\n/** Optional parameters. */\nexport interface DeleteCertificateOperationOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteCertificateOperation operation. */\nexport type DeleteCertificateOperationResponse = CertificateOperation;\n\n/** Optional parameters. */\nexport interface MergeCertificateOptionalParams\n  extends coreClient.OperationOptions {\n  /** The attributes of the certificate (optional). */\n  certificateAttributes?: CertificateAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the mergeCertificate operation. */\nexport type MergeCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface BackupCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the backupCertificate operation. */\nexport type BackupCertificateResponse = BackupCertificateResult;\n\n/** Optional parameters. */\nexport interface RestoreCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the restoreCertificate operation. */\nexport type RestoreCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface GetDeletedCertificatesOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n  /** Specifies whether to include certificates which are not completely provisioned. */\n  includePending?: boolean;\n}\n\n/** Contains response data for the getDeletedCertificates operation. */\nexport type GetDeletedCertificatesResponse = DeletedCertificateListResult;\n\n/** Optional parameters. */\nexport interface GetDeletedCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeletedCertificate operation. */\nexport type GetDeletedCertificateResponse = DeletedCertificateBundle;\n\n/** Optional parameters. */\nexport interface PurgeDeletedCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface RecoverDeletedCertificateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the recoverDeletedCertificate operation. */\nexport type RecoverDeletedCertificateResponse = CertificateBundle;\n\n/** Optional parameters. */\nexport interface GetCertificatesNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n  /** Specifies whether to include certificates which are not completely provisioned. */\n  includePending?: boolean;\n}\n\n/** Contains response data for the getCertificatesNext operation. */\nexport type GetCertificatesNextResponse = CertificateListResult;\n\n/** Optional parameters. */\nexport interface GetCertificateIssuersNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getCertificateIssuersNext operation. */\nexport type GetCertificateIssuersNextResponse = CertificateIssuerListResult;\n\n/** Optional parameters. */\nexport interface GetCertificateVersionsNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getCertificateVersionsNext operation. */\nexport type GetCertificateVersionsNextResponse = CertificateListResult;\n\n/** Optional parameters. */\nexport interface GetDeletedCertificatesNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n  /** Specifies whether to include certificates which are not completely provisioned. */\n  includePending?: boolean;\n}\n\n/** Contains response data for the getDeletedCertificatesNext operation. */\nexport type GetDeletedCertificatesNextResponse = DeletedCertificateListResult;\n\n/** Optional parameters. */\nexport interface KeyVaultClientOptionalParams\n  extends coreHttpCompat.ExtendedServiceClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}
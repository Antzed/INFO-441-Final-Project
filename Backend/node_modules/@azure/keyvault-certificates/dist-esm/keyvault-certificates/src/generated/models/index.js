/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ApiVersion73} that the service accepts. */
export var KnownApiVersion73;
(function (KnownApiVersion73) {
    /** Api Version '7.3' */
    KnownApiVersion73["Seven3"] = "7.3";
})(KnownApiVersion73 || (KnownApiVersion73 = {}));
/** Known values of {@link DeletionRecoveryLevel} that the service accepts. */
export var KnownDeletionRecoveryLevel;
(function (KnownDeletionRecoveryLevel) {
    /** Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) */
    KnownDeletionRecoveryLevel["Purgeable"] = "Purgeable";
    /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered */
    KnownDeletionRecoveryLevel["RecoverablePurgeable"] = "Recoverable+Purgeable";
    /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered */
    KnownDeletionRecoveryLevel["Recoverable"] = "Recoverable";
    /** Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered */
    KnownDeletionRecoveryLevel["RecoverableProtectedSubscription"] = "Recoverable+ProtectedSubscription";
    /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. */
    KnownDeletionRecoveryLevel["CustomizedRecoverablePurgeable"] = "CustomizedRecoverable+Purgeable";
    /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. */
    KnownDeletionRecoveryLevel["CustomizedRecoverable"] = "CustomizedRecoverable";
    /** Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled. */
    KnownDeletionRecoveryLevel["CustomizedRecoverableProtectedSubscription"] = "CustomizedRecoverable+ProtectedSubscription";
})(KnownDeletionRecoveryLevel || (KnownDeletionRecoveryLevel = {}));
/** Known values of {@link JsonWebKeyType} that the service accepts. */
export var KnownJsonWebKeyType;
(function (KnownJsonWebKeyType) {
    KnownJsonWebKeyType["EC"] = "EC";
    KnownJsonWebKeyType["ECHSM"] = "EC-HSM";
    KnownJsonWebKeyType["RSA"] = "RSA";
    KnownJsonWebKeyType["RSAHSM"] = "RSA-HSM";
    KnownJsonWebKeyType["Oct"] = "oct";
    KnownJsonWebKeyType["OctHSM"] = "oct-HSM";
})(KnownJsonWebKeyType || (KnownJsonWebKeyType = {}));
/** Known values of {@link JsonWebKeyCurveName} that the service accepts. */
export var KnownJsonWebKeyCurveName;
(function (KnownJsonWebKeyCurveName) {
    KnownJsonWebKeyCurveName["P256"] = "P-256";
    KnownJsonWebKeyCurveName["P384"] = "P-384";
    KnownJsonWebKeyCurveName["P521"] = "P-521";
    KnownJsonWebKeyCurveName["P256K"] = "P-256K";
})(KnownJsonWebKeyCurveName || (KnownJsonWebKeyCurveName = {}));
/** Known values of {@link KeyUsageType} that the service accepts. */
export var KnownKeyUsageType;
(function (KnownKeyUsageType) {
    KnownKeyUsageType["DigitalSignature"] = "digitalSignature";
    KnownKeyUsageType["NonRepudiation"] = "nonRepudiation";
    KnownKeyUsageType["KeyEncipherment"] = "keyEncipherment";
    KnownKeyUsageType["DataEncipherment"] = "dataEncipherment";
    KnownKeyUsageType["KeyAgreement"] = "keyAgreement";
    KnownKeyUsageType["KeyCertSign"] = "keyCertSign";
    KnownKeyUsageType["CRLSign"] = "cRLSign";
    KnownKeyUsageType["EncipherOnly"] = "encipherOnly";
    KnownKeyUsageType["DecipherOnly"] = "decipherOnly";
})(KnownKeyUsageType || (KnownKeyUsageType = {}));
//# sourceMappingURL=index.js.map
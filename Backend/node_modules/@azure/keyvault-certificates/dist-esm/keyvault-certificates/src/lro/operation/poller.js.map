{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../../src/lro/operation/poller.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,iCAAiC,EAA6B,MAAM,aAAa,CAAC;AAE3F,OAAO,EACL,yBAAyB,EAEzB,UAAU,GACX,MAAM,8BAA8B,CAAC;AAItC;;GAEG;AACH,MAAM,OAAO,0BAA2B,SAAQ,yBAG/C;IACC,YAAY,OAA0C;QACpD,MAAM,EACJ,QAAQ,EACR,MAAM,EACN,eAAe,EACf,gBAAgB,EAChB,YAAY,GAAG,IAAI,EACnB,UAAU,GACX,GAAG,OAAO,CAAC;QAEZ,IAAI,KAA4C,CAAC;QAEjD,IAAI,UAAU,EAAE;YACd,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;SACtC;QAED,MAAM,SAAS,GAAG,IAAI,iCAAiC,iCAEhD,KAAK,KACR,eAAe,KAEjB,QAAQ,EACR,MAAM,EACN,gBAAgB,CACjB,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,iBAAiB;QACtB,uCACK,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KACnC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,oBAAoB,IAC/D;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CertificateOperationPollOperation, CertificateOperationState } from \"./operation\";\nimport { KeyVaultCertificateWithPolicy } from \"../../certificatesModels\";\nimport {\n  KeyVaultCertificatePoller,\n  KeyVaultCertificatePollerOptions,\n  cleanState,\n} from \"../keyVaultCertificatePoller\";\n\nexport interface CertificateOperationPollerOptions extends KeyVaultCertificatePollerOptions {}\n\n/**\n * Class that creates a poller that waits until a certificate finishes being created\n */\nexport class CertificateOperationPoller extends KeyVaultCertificatePoller<\n  CertificateOperationState,\n  KeyVaultCertificateWithPolicy\n> {\n  constructor(options: CertificateOperationPollerOptions) {\n    const {\n      vaultUrl,\n      client,\n      certificateName,\n      operationOptions,\n      intervalInMs = 2000,\n      resumeFrom,\n    } = options;\n\n    let state: CertificateOperationState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = new CertificateOperationPollOperation(\n      {\n        ...state,\n        certificateName,\n      },\n      vaultUrl,\n      client,\n      operationOptions\n    );\n\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n  }\n\n  /**\n   * Gets the public state of the polling operation\n   */\n  public getOperationState(): CertificateOperationState {\n    return {\n      ...cleanState(this.operation.state),\n      certificateOperation: this.operation.state.certificateOperation,\n    };\n  }\n}\n"]}